# Chrome DevTools MCP Usage Guide for AI Agent

## Purpose

Use Chrome DevTools MCP to verify web application functionality, debug issues, and validate API endpoints directly in the browser.

## When to Use Chrome DevTools MCP

### 1. **Verify Page Loading**

- After making changes to web components or pages
- To check if the application renders correctly
- To identify build or runtime errors

### 2. **Debug API Endpoints**

- Test API responses directly in the browser
- Check for network errors or failed requests
- Verify API data format and content

### 3. **Check Console Errors**

- Identify JavaScript errors
- Debug React component issues
- Monitor warnings and logs

### 4. **Validate User Experience**

- Test navigation flows
- Verify interactive elements
- Check responsive design

## Common Workflow

### Basic Verification Flow

```
1. mcp_chrome-devtools_list_pages() 
   → Check available browser tabs

2. mcp_chrome-devtools_navigate_page(url="http://localhost:3000/...")
   → Navigate to the target page

3. mcp_chrome-devtools_take_snapshot()
   → Capture page content structure

4. mcp_chrome-devtools_list_console_messages()
   → Check for errors or warnings

5. mcp_chrome-devtools_list_network_requests(resourceTypes=["fetch", "xhr"])
   → Verify API calls
```

### API Endpoint Testing

```typescript
// Test an API endpoint
1. Navigate to API URL:
   mcp_chrome-devtools_navigate_page(url="http://localhost:3000/api/...")

2. Take snapshot to see response:
   mcp_chrome-devtools_take_snapshot()

3. Check console for errors:
   mcp_chrome-devtools_list_console_messages()
```

### Page Interaction Testing

```typescript
// Fill a form
mcp_chrome-devtools_fill(uid="input_uid", value="test@example.com")

// Click a button
mcp_chrome-devtools_click(uid="button_uid")

// Wait for result
mcp_chrome-devtools_wait_for(text="Success message")
```

## Example: Verifying Dashboard Page

```typescript
// 1. Navigate to dashboard
await mcp_chrome-devtools_navigate_page({
  url: "http://localhost:3000/dashboard",
  timeout: 5000
});

// 2. Take snapshot to see page structure
await mcp_chrome-devtools_take_snapshot();

// 3. Check console for errors
await mcp_chrome-devtools_list_console_messages();

// 4. Check network requests (API calls)
await mcp_chrome-devtools_list_network_requests({
  resourceTypes: ["fetch", "xhr"],
  pageSize: 20
});

// 5. Take screenshot for visual verification (optional)
await mcp_chrome-devtools_take_screenshot({
  format: "png",
  fullPage: true
});
```

## Example: Testing API Integration

```typescript
// Test account analytics API
await mcp_chrome-devtools_navigate_page({
  url: "http://localhost:3000/api/analytics/account?period=7d&exchange=all"
});

// Capture JSON response
const snapshot = await mcp_chrome-devtools_take_snapshot();

// Verify no errors
const messages = await mcp_chrome-devtools_list_console_messages();
```

## Best Practices

### ✅ DO

- Use DevTools MCP after making significant changes
- Test both UI pages and API endpoints
- Check console messages for hidden errors
- Verify network requests to ensure API calls succeed
- Take screenshots when visual verification is important

### ❌ DON'T

- Don't skip DevTools verification when user reports issues
- Don't rely solely on terminal output for web debugging
- Don't forget to check console messages
- Don't assume API works without testing in browser

## Common Issues and Solutions

### Issue: "Module not found" Error

**Symptoms**: Build error in browser console
**Solution**:

1. Check package.json dependencies
2. Verify build outputs exist (dist/ folders)
3. Check Next.js configuration (serverExternalPackages)
4. Rebuild packages: `pnpm run build --filter @package-name`

### Issue: API Returns 500 Error

**Symptoms**: Network request shows 500 status
**Solution**:

1. Check server terminal for detailed error logs
2. Verify database connection
3. Ensure DataManager is initialized
4. Check entity relationships are correct

### Issue: Page Redirects to Login

**Symptoms**: All pages redirect to /auth/sign-in
**Solution**:

1. Check middleware configuration
2. Verify skipPathsPattern includes API routes
3. Test API endpoints directly (bypass middleware)

### Issue: TypeORM Entity Not Found

**Symptoms**: "relation does not exist" error
**Solution**:

1. Run database migrations
2. Set synchronize: true temporarily to create tables
3. Verify entity is included in DataSource configuration

## Integration with Development Workflow

```
1. Make code changes
2. Wait for hot reload (5-10 seconds)
3. Use DevTools MCP to verify:
   - Page loads correctly
   - No console errors
   - API returns expected data
   - Network requests succeed
4. If issues found, fix and repeat
```

## Advanced Usage

### Performance Testing

```typescript
// Start performance trace
await mcp_chrome-devtools_performance_start_trace({
  reload: true,
  autoStop: true
});

// Analyze insights
await mcp_chrome-devtools_performance_analyze_insight({
  insightName: "LCPBreakdown"
});
```

### Network Throttling

```typescript
// Simulate slow connection
await mcp_chrome-devtools_emulate_network({
  throttlingOption: "Slow 3G"
});
```

### CPU Throttling

```typescript
// Simulate slow device
await mcp_chrome-devtools_emulate_cpu({
  throttlingRate: 4
});
```

## Summary

Chrome DevTools MCP is a powerful tool for:

- ✅ Verifying web application functionality
- ✅ Debugging runtime issues
- ✅ Testing API endpoints in browser context
- ✅ Catching errors before user reports them
- ✅ Validating fixes immediately

**Always use DevTools MCP when:**

- User reports a web UI issue
- After making changes to web components or APIs
- When debugging Next.js compilation or runtime errors
- To validate that APIs work correctly in browser context

---

**Note**: The user has explicitly requested that this workflow be incorporated into AI agent rules for web development tasks.
